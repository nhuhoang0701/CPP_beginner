#include <iostream>

char slot[10] = {'0','1','2','3','4','5','6','7','8','9'};
#define UNKNOWN 0
#define DRAW 1
#define WIN 2
void board();
int checkWin(const char (&slot)[10]);

int main() {
    int player=1,i,check;
    char mark;
    do {
        board();
        player = (player%2)?1:2;
        mark = (player == 1)?'X':'O';
        int choice;
        std::cout << "Player " << player << " 's move: ";
        std::cin >> choice;
        if (slot[1] == '1' && choice == 1) {
            slot[choice] = mark;
        }
        else if (slot[2] == '2' && choice == 2) {
            slot[choice] = mark;
        }
        else if (slot[3] == '3' && choice == 3) {
            slot[choice] = mark;
        }
        else if (slot[4] == '4' && choice == 4) {
            slot[choice] = mark;
        }
        else if (slot[5] == '5' && choice == 5) {
            slot[choice] = mark;
        }
        else if (slot[6] == '6' && choice == 6) {
            slot[choice] = mark;
        }
        else if (slot[7] == '7' && choice == 7) {
            slot[choice] = mark;
        }
        else if (slot[8] == '8' && choice == 8) {
            slot[choice] = mark;
        }
        else if (slot[9] == '9' && choice == 9) {
            slot[choice] = mark;
        }
        else {
            std::cout<<"Invalid move\n";
            std::cin.ignore();
            std::cin.get();
        }
        check = checkWin(slot);
        if(check != UNKNOWN) break;
        player++;
    } while(true);
    board();
    if(check == DRAW) std::cout << "Tie!";
    else {
        std::cout << "Player " << player-- << " win!"; 
    }
}

/***********************************************************************
                    FUNCTION CHECKING STATE OF THE GAME 
***********************************************************************/

int checkWin(const char (&slot)[10]) {
    int flag = DRAW;
    for(int i = 1; i <= 9; i++) {
        if(int(slot[i]) == (i+48)) flag = WIN;
    }
    if(flag == DRAW) return DRAW;

    for(int i = 1; i <= 6; i += 3) {
        if(slot[i] == slot[i+1] && slot[i+1] == slot[i+2]) return flag;
    }
    for(int i = 1; i <= 3; i ++) {
        if(slot[i] == slot[i+3] && slot[i+3] == slot[i+6]) return flag;
    }
    if(slot[1] == slot[5] && slot[5] == slot[9]) return flag;
    if(slot[3] == slot[5] && slot[5] == slot[7]) return flag;
    flag = UNKNOWN;
    return flag;
}

/***********************************************************************
                    DRAW THE TIC-TAC-TOE TABLE  
***********************************************************************/

void board() {
    system("cls");
    std::cout<<"\tTIC-TAC-TOE\n\n";
    std::cout<<"Player 1: (X) - Player 2: (O)\n";
    std::cout<<"  "<<slot[1]<<"  |  "<<slot[2]<<"  |  "<<slot[3]<<'\n';
    std::cout<<"_____|_____|_____\n";
    std::cout<<"  "<<slot[4]<<"  |  "<<slot[5]<<"  |  "<<slot[6]<<'\n';
    std::cout<<"_____|_____|_____\n";
    std::cout<<"  "<<slot[7]<<"  |  "<<slot[8]<<"  |  "<<slot[9]<<'\n';
    return;
}
